import os
import pandas as pd
import json
from google.cloud import bigquery
from termcolor import colored
from openpyxl import Workbook

# Define root folder where local data is stored
LOCAL_DATA_FOLDER = "/content/data"
output_file = "/content/test_cases_results.xlsx"
evidence_file = "/content/test_execution_evidence.xlsx"

# Authenticate BigQuery
try:
    print("Authenticating with BigQuery...")
    client = bigquery.Client.from_service_account_json("your-service-account.json")
    bigquery_available = True
    print("BigQuery authentication successful.")
except Exception as e:
    print(colored("BigQuery authentication failed. Only local data will be used.", "red"))
    bigquery_available = False

# Load test cases from Excel
print("Loading test cases from Excel...")
test_cases_file = "test_cases.xlsx"
test_cases = pd.read_excel(test_cases_file)
print("Test cases loaded successfully.")

# Create workbook for evidence
wb_evidence = Workbook()

def compare_bigquery_tables(project1, dataset1, table1, column1, project2, dataset2, table2, column2, scenario):
    """Compare two BigQuery tables directly using SQL."""
    if not bigquery_available:
        return "Skipped"
    
    print(f"Comparing BigQuery tables: {project1}.{dataset1}.{table1} vs {project2}.{dataset2}.{table2} based on scenario: {scenario}")
    
    if "count should be equal" in scenario:
        query = f"""
            SELECT 
                CASE 
                    WHEN (SELECT COUNT(*) FROM `{project1}.{dataset1}.{table1}`) =
                         (SELECT COUNT(*) FROM `{project2}.{dataset2}.{table2}`)
                    THEN 'Pass'
                    ELSE 'Fail'
                END AS comparison_result
        """
    elif "values should match" in scenario:
        query = f"""
            SELECT CASE 
                WHEN COUNT(*) = 0 THEN 'Pass' 
                ELSE 'Fail' 
            END AS comparison_result
            FROM (
                (SELECT {column1} AS col FROM `{project1}.{dataset1}.{table1}`
                EXCEPT DISTINCT
                SELECT {column2} AS col FROM `{project2}.{dataset2}.{table2}`)
                UNION ALL
                (SELECT {column2} AS col FROM `{project2}.{dataset2}.{table2}`
                EXCEPT DISTINCT
                SELECT {column1} AS col FROM `{project1}.{dataset1}.{table1}`)
            ) AS mismatches
        """
    else:
        return "Skipped"
    
    print("Executing BigQuery comparison query...")
    try:
        result = client.query(query).to_dataframe()
        if "count should be equal" in scenario:
            return result["comparison_result"].iloc[0]
        elif "values should match" in scenario:
            mismatch_count = result["mismatch_count"].iloc[0]
            return "Fail" if mismatch_count > 0 else "Pass"
    except Exception as e:
        print(colored(f"Error querying BigQuery: {e}", "red"))
        return "Error"

def compare_local_database_tables(project1, dataset1, table1, column1, project2, dataset2, table2, column2, scenario):
    """Compare two local database tables using pandas."""
    if "local database" not in scenario:
        return "Skipped"
    
    print(f"Comparing local database tables: {project1}/{dataset1}/{table1} vs {project2}/{dataset2}/{table2} based on scenario: {scenario}")
    project1_path = os.path.join(LOCAL_DATA_FOLDER, project1, f"{dataset1}.xlsx")
    project2_path = os.path.join(LOCAL_DATA_FOLDER, project2, f"{dataset2}.xlsx")
    
    if not os.path.exists(project1_path) or not os.path.exists(project2_path):
        print("One or both local database files are missing. Skipping comparison.")
        return "Skipped"
    
    try:
        df1 = pd.read_excel(project1_path, sheet_name=table1, usecols=[column1])
        df2 = pd.read_excel(project2_path, sheet_name=table2, usecols=[column2])
        
        if "count should be equal" in scenario:
            return "Pass" if len(df1) == len(df2) else "Fail"
        elif "values should match" in scenario:
            return "Pass" if df1[column1].reset_index(drop=True).equals(df2[column2].reset_index(drop=True)) else "Fail"
    except Exception as e:
        print(colored(f"Error reading local database files: {e}", "red"))
        return "Error"
    
    return "Skipped"

def compare_datasets(test_case):
    """Compare two datasets based on test case details."""
    scenario = str(test_case["Scenario"]).lower()
    test_data_raw = str(test_case["Test Data"])

    try:
        test_data = json.loads(test_data_raw.replace("'", '"')) if test_data_raw != "nan" else {}
        test_case_id = test_case["Test Case ID"]
        print(f"Processing test case: {test_case_id}")

        dataset1_info = test_data.get("dataset1", {})
        dataset2_info = test_data.get("dataset2", {})

        project1, dataset1, table1, column1 = dataset1_info.get("project"), dataset1_info.get("dataset"), dataset1_info.get("table"), dataset1_info.get("column")
        project2, dataset2, table2, column2 = dataset2_info.get("project"), dataset2_info.get("dataset"), dataset2_info.get("table"), dataset2_info.get("column")

        if "bigquery" in scenario:
            return compare_bigquery_tables(project1, dataset1, table1, column1, project2, dataset2, table2, column2, scenario)
        elif "local database" in scenario:
            return compare_local_database_tables(project1, dataset1, table1, column1, project2, dataset2, table2, column2, scenario)
        
        return "Skipped"
    
    except Exception as e:
        print(colored(f"{test_case_id} - Error - {str(e)}", "red"))
        return "Error"

print("Starting dataset comparisons...")
test_cases["Result"] = test_cases.apply(lambda row: compare_datasets(row), axis=1)
print("All comparisons completed.")

# Save updated results back to Excel
print("Saving results to Excel...")
test_cases.to_excel(output_file, index=False)
print("âœ… Test execution completed. Results saved in:", output_file)
