import os
import pandas as pd
import json
from google.cloud import bigquery
from termcolor import colored
from openpyxl import Workbook

# Define root folder where local data is stored
LOCAL_DATA_FOLDER = "/content/data"
output_file = "/content/test_cases_results.xlsx"
evidence_file = "/content/test_execution_evidence.xlsx"

# Authenticate BigQuery
try:
    print("Authenticating with BigQuery...")
    client = bigquery.Client.from_service_account_json("your-service-account.json")
    bigquery_available = True
    print("BigQuery authentication successful.")
except Exception as e:
    print(colored("BigQuery authentication failed. Only local data will be used.", "red"))
    bigquery_available = False

# Load test cases from Excel
print("Loading test cases from Excel...")
test_cases_file = "test_cases.xlsx"
test_cases = pd.read_excel(test_cases_file)
print("Test cases loaded successfully.")

# Create workbook for evidence
wb_evidence = Workbook()

def apply_where_clause(query, where_clause):
    """Append WHERE clause to the query if provided."""
    if where_clause:
        query = query.strip()
        if "WHERE" in query.upper():
            query += f" AND ({where_clause})"
        else:
            query += f" WHERE {where_clause}"
    return query

def compare_datasets_in_bigquery(project1, dataset1, table1, where_clause1, project2, dataset2, table2, where_clause2):
    """Compare two datasets from different projects or tables in BigQuery with optional WHERE clauses."""
    if not bigquery_available:
        return "Skipped"
    
    print(f"Comparing `{project1}.{dataset1}.{table1}` with `{project2}.{dataset2}.{table2}`")
    
    query1 = f"SELECT * FROM `{project1}.{dataset1}.{table1}`"
    query2 = f"SELECT * FROM `{project2}.{dataset2}.{table2}`"
    
    query1 = apply_where_clause(query1, where_clause1)
    query2 = apply_where_clause(query2, where_clause2)
    
    print("Executing BigQuery comparison queries...")
    try:
        df1 = client.query(query1).to_dataframe()
        df2 = client.query(query2).to_dataframe()
        
        if df1.equals(df2):
            return "Pass"
        else:
            return "Fail"
    except Exception as e:
        print(colored(f"Error querying BigQuery: {e}", "red"))
        return "Error"

def compare_datasets(test_case):
    """Compare two datasets with optional WHERE clauses."""
    scenario = str(test_case["Scenario"]).lower()
    test_data_raw = str(test_case["Test Data"])
    
    if "compare" not in scenario:
        return "Skipped"
    
    try:
        test_data = json.loads(test_data_raw) if test_data_raw != "nan" else {}
        test_case_id = test_case["Test Case ID"]
        print(f"Processing test case for dataset comparison: {test_case_id}")
        
        dataset1_info = test_data.get("dataset1", {})
        project1, dataset1, table1, where_clause1 = dataset1_info.get("project"), dataset1_info.get("dataset"), dataset1_info.get("table"), dataset1_info.get("where_clause", "")
        
        dataset2_info = test_data.get("dataset2", {})
        project2, dataset2, table2, where_clause2 = dataset2_info.get("project"), dataset2_info.get("dataset"), dataset2_info.get("table"), dataset2_info.get("where_clause", "")
        
        if "bigquery" in scenario:
            return compare_datasets_in_bigquery(project1, dataset1, table1, where_clause1, project2, dataset2, table2, where_clause2)
        
        return "Skipped"
    
    except Exception as e:
        print(colored(f"{test_case_id} - Error - {str(e)}", "red"))
        return "Error"

# Define test case processing functions
PROCESSORS = {
    "compare": compare_datasets,
    "new column": check_new_column_in_bigquery,
    "not null": check_column_not_null
}

print("Starting test case execution...")

def process_test_case(row):
    scenario = str(row["Scenario"]).lower()
    for keyword, function in PROCESSORS.items():
        if keyword in scenario:
            return function(row)
    return "Skipped"

test_cases["Result"] = test_cases.apply(process_test_case, axis=1)

print("All test case checks completed.")

# Save updated results back to Excel
print("Saving results to Excel...")
test_cases.to_excel(output_file, index=False)
print("âœ… Test execution completed. Results saved in:", output_file)
