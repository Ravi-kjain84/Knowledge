import os
import pandas as pd
import json
from google.cloud import bigquery
from termcolor import colored
from openpyxl import Workbook

# Define output files
output_file = "test_cases_results.xlsx"
evidence_file = "Test_Case_Evidences.xlsx"

# Authenticate BigQuery
try:
    print("Authenticating with BigQuery...")
    client = bigquery.Client.from_service_account_json("your-service-account.json")
    bigquery_available = True
    print("BigQuery authentication successful.")
except Exception as e:
    print(colored("BigQuery authentication failed. Only local data will be used.", "red"))
    bigquery_available = False

# Load test cases
test_cases_file = "test_cases.xlsx"
test_cases = pd.read_excel(test_cases_file)

# Global dictionary for test evidence
test_evidence = {}

def fetch_bigquery_data(project, dataset, table):
    """Fetch BigQuery table data as DataFrame."""
    if not bigquery_available:
        return None, "BigQuery not available."

    query = f"SELECT * FROM `{project}.{dataset}.{table}`"
    try:
        df = client.query(query).to_dataframe()
        return df, None
    except Exception as e:
        return None, str(e)

def compare_dataframes(df1, df2):
    """Compare structure and data of two DataFrames."""
    df1.columns = df1.columns.str.strip().str.lower()
    df2.columns = df2.columns.str.strip().str.lower()

    cols1, cols2 = set(df1.columns), set(df2.columns)
    missing_cols_df1, missing_cols_df2 = list(cols2 - cols1), list(cols1 - cols2)

    matching_rows = pd.merge(df1, df2, how="inner")
    missing_rows_df1 = pd.merge(df2, df1, how="left", indicator=True).query('_merge == "left_only"').drop("_merge", axis=1)
    missing_rows_df2 = pd.merge(df1, df2, how="left", indicator=True).query('_merge == "left_only"').drop("_merge", axis=1)

    return missing_cols_df1, missing_cols_df2, missing_rows_df1, missing_rows_df2, matching_rows

def process_test_case(row):
    """Process test case based on scenario."""
    test_case_id = row["Test Case ID"]
    scenario = row["Scenario"]
    test_data = json.loads(row["Test Data"]) if str(row["Test Data"]) != "nan" else {}

    # Compare BigQuery with BigQuery
    if "compare bigquery with bigquery" in scenario.lower():
        df1, err1 = fetch_bigquery_data(**test_data["bigquery1"])
        df2, err2 = fetch_bigquery_data(**test_data["bigquery2"])
        if err1 or err2:
            return "Error", f"BigQuery Fetch Error: {err1 or err2}"
        missing_cols_df1, missing_cols_df2, missing_rows_df1, missing_rows_df2, matching_rows = compare_dataframes(df1, df2)
    
    # Compare BigQuery with Excel
    elif "compare bigquery with excel" in scenario.lower():
        df1, err1 = fetch_bigquery_data(**test_data["bigquery"])
        df2 = pd.read_excel(test_data["excel"]["file"], sheet_name=test_data["excel"]["sheet"])
        if err1:
            return "Error", f"BigQuery Fetch Error: {err1}"
        missing_cols_df1, missing_cols_df2, missing_rows_df1, missing_rows_df2, matching_rows = compare_dataframes(df1, df2)

    # Compare Excel with Excel
    elif "compare excel with excel" in scenario.lower():
        df1 = pd.read_excel(test_data["excel1"]["file"], sheet_name=test_data["excel1"]["sheet"])
        df2 = pd.read_excel(test_data["excel2"]["file"], sheet_name=test_data["excel2"]["sheet"])
        missing_cols_df1, missing_cols_df2, missing_rows_df1, missing_rows_df2, matching_rows = compare_dataframes(df1, df2)

    # Store results
    result = "Pass" if not missing_cols_df1 and not missing_cols_df2 and missing_rows_df1.empty and missing_rows_df2.empty else "Fail"
    explanation = f"Columns matched: {len(df1.columns)} | Rows matched: {len(matching_rows)}"
    
    test_evidence[test_case_id] = {
        "Scenario": scenario,
        "Result": result,
        "Missing Columns Source 1": missing_cols_df1,
        "Missing Columns Source 2": missing_cols_df2,
        "Missing Rows Source 1": missing_rows_df1.to_dict(orient="records"),
        "Missing Rows Source 2": missing_rows_df2.to_dict(orient="records")
    }
    return result

test_cases["Result"] = test_cases.apply(process_test_case, axis=1)
test_cases.to_excel(output_file, index=False)

