import os
import pandas as pd
import json
from google.cloud import bigquery
from termcolor import colored
from openpyxl import Workbook

# Define root folder where local data is stored
LOCAL_DATA_FOLDER = "/content/data"
output_file = "/content/test_cases_results.xlsx"
evidence_file = "/content/test_execution_evidence.xlsx"

# Authenticate BigQuery
try:
    print("Authenticating with BigQuery...")
    client = bigquery.Client.from_service_account_json("your-service-account.json")
    bigquery_available = True
    print("BigQuery authentication successful.")
except Exception as e:
    print(colored("BigQuery authentication failed. Only local data will be used.", "red"))
    bigquery_available = False

# Load test cases from Excel
print("Loading test cases from Excel...")
test_cases_file = "test_cases.xlsx"
test_cases = pd.read_excel(test_cases_file)
print("Test cases loaded successfully.")

# Create workbook for evidence
wb_evidence = Workbook()

def apply_where_clause(query, where_clause):
    """Append WHERE clause to the query if provided."""
    if where_clause and where_clause.strip():
        query = query.strip()
        if "WHERE" in query.upper():
            query += f" AND ({where_clause})"
        else:
            query += f" WHERE {where_clause}"
    return query

def compare_column_counts_in_bigquery(project1, dataset1, table1, column1, where_clause1,
                                       project2, dataset2, table2, column2, where_clause2):
    """Compare counts of a specific column between two datasets in BigQuery using SQL CASE statement and return counts."""
    if not bigquery_available:
        return "Skipped", 0, 0
    
    print(f"Comparing count of column '{column1}' in `{project1}.{dataset1}.{table1}` with `{project2}.{dataset2}.{table2}`")
    
    query = f"""
        WITH count1 AS (
            SELECT COUNT({column1}) AS count_value1 FROM `{project1}.{dataset1}.{table1}`
            {('WHERE ' + where_clause1) if where_clause1 else ''}
        ),
        count2 AS (
            SELECT COUNT({column2}) AS count_value2 FROM `{project2}.{dataset2}.{table2}`
            {('WHERE ' + where_clause2) if where_clause2 else ''}
        )
        SELECT 
            c1.count_value1 AS count_table1,
            c2.count_value2 AS count_table2,
            CASE 
                WHEN c1.count_value1 = c2.count_value2 THEN 'Pass'
                ELSE 'Fail'
            END AS result
        FROM count1 c1, count2 c2;
    """
    
    print("Executing BigQuery count comparison query...")
    try:
        df = client.query(query).to_dataframe()
        result = df["result"].iloc[0]
        count_table1 = df["count_table1"].iloc[0]
        count_table2 = df["count_table2"].iloc[0]
        return result, count_table1, count_table2
    except Exception as e:
        print(colored(f"Error querying BigQuery: {e}", "red"))
        return "Error", 0, 0

def compare_column_counts(test_case):
    """Compare column counts between two datasets with optional WHERE clauses using BigQuery."""
    scenario = str(test_case["Scenario"]).lower()
    test_data_raw = str(test_case["Test Data"])
    
    if "compare counts" not in scenario:
        return "Skipped", 0, 0
    
    try:
        test_data = json.loads(test_data_raw) if test_data_raw != "nan" else {}
        test_case_id = test_case["Test Case ID"]
        print(f"Processing test case for column count comparison: {test_case_id}")
        
        dataset1_info = test_data.get("dataset1", {})
        project1, dataset1, table1, column1 = dataset1_info.get("project"), dataset1_info.get("dataset"), dataset1_info.get("table"), dataset1_info.get("column")
        where_clause1 = dataset1_info.get("where_clause", "")
        
        dataset2_info = test_data.get("dataset2", {})
        project2, dataset2, table2, column2 = dataset2_info.get("project"), dataset2_info.get("dataset"), dataset2_info.get("table"), dataset2_info.get("column")
        where_clause2 = dataset2_info.get("where_clause", "")
        
        if "bigquery" in scenario:
            return compare_column_counts_in_bigquery(project1, dataset1, table1, column1, where_clause1,
                                                     project2, dataset2, table2, column2, where_clause2)
        
        return "Skipped", 0, 0
    
    except Exception as e:
        print(colored(f"{test_case_id} - Error - {str(e)}", "red"))
        return "Error", 0, 0

# Define test case processing functions
PROCESSORS = {
    "compare counts": compare_column_counts,
    "compare": compare_datasets,
    "new column": check_new_column_in_bigquery,
    "not null": check_column_not_null
}

print("Starting test case execution...")

def process_test_case(row):
    scenario = str(row["Scenario"]).lower()
    for keyword, function in PROCESSORS.items():
        if keyword in scenario:
            result, count_table1, count_table2 = function(row)
            row["Count Table 1"] = count_table1
            row["Count Table 2"] = count_table2
            return result
    return "Skipped"

test_cases["Result"] = test_cases.apply(process_test_case, axis=1)

print("All test case checks completed.")

# Save updated results back to Excel
print("Saving results to Excel...")
test_cases.to_excel(output_file, index=False)
print("âœ… Test execution completed. Results saved in:", output_file)
